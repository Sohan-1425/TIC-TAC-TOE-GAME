import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows, columns, and diagonals for winning combinations
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(board[i][j] != " " for i in range(3) for j in range(3))

def ai_move(board, player):
    # Simple AI strategy: Make a random move
    while True:
        row = random.randint(0, 2)
        col = random.randint(0, 2)
        if board[row][col] == " ":
            board[row][col] = player
            break

def tic_tac_toe_ai():
    board = [[" "]*3 for _ in range(3)]
    players = ["X", "O"]
    current_player = 0

    while True:
        print_board(board)
        print(f"Player {players[current_player]}'s turn")

        if players[current_player] == "X":
            row = int(input("Enter row number (0, 1, or 2): "))
            col = int(input("Enter column number (0, 1, or 2): "))
            if board[row][col] == " ":
                board[row][col] = players[current_player]
            else:
                print("That position is already taken. Try again.")
                continue
        else:
            ai_move(board, players[current_player])

        if check_winner(board, players[current_player]):
            print_board(board)
            print(f"Player {players[current_player]} wins!")
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    tic_tac_toe_ai()
